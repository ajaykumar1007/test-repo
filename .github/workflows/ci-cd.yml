name: Trigger Lambda

on:
  push:
    branches:
      - main  # Replace with your desired branch name
jobs:
  invoke_lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Invoke Lambda
        run: |
          BRANCH=$(git branch --show-current)
          # REPO=$(basename -s .git $(git config --get remote.origin.url))
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "REPO=${REPO}" >> $GITHUB_ENV
          if [ $BRANCH -eq "stage" ];
          then
             echo '{"Repo":"$REPO","Branch":"$BRANCH","Deployment_Name":"${{ secrets.NAME }}","Namespace":"${{ secrets.NAMESPCE }}","Cluster_Name":"${{ secrets.CLUSTER }}","FORCE":"${{ secrets.FORCE_VALUE }}"}' | aws lambda invoke --function-name MyLambdaFunction --payload file:///dev/stdin output.txt
          elseif [ $BRANCH -eq "uat" ];
             echo '{"Repo":"$REPO","Branch":"$BRANCH","Deployment_Name":"${{ secrets.NAME }}","Namespace":"${{ secrets.NAMESPCE }}","Cluster_Name":"${{ secrets.CLUSTER }}","FORCE":"${{ secrets.FORCE_VALUE }}"}' | aws lambda invoke --function-name MyLambdaFunction --payload file:///dev/stdin output.txt
          elseif [ $BRANCH -eq "prod" ];
             echo '{"Repo":"$REPO","Branch":"$BRANCH","Deployment_Name":"${{ secrets.NAME }}","Namespace":"${{ secrets.NAMESPCE }}","Cluster_Name":"${{ secrets.CLUSTER }}","FORCE":"${{ secrets.FORCE_VALUE }}"}' | aws lambda invoke --function-name MyLambdaFunction --payload file:///dev/stdin output.txt
          else
            echo "Not Found"
          fi
